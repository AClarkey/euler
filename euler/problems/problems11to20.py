"""Project Euler: Problems 11-20"""
import math
import numpy as np

from euler import prime


def problem_eleven(data, num):
    """
    In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
    The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
    What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
    """

    rows = np.shape(data)[0]
    cols = np.shape(data)[1]
    print(f"rows: {rows} cols: {cols}")
    max_product = 1

    # horizontal (includes both left and right)
    for m in range(rows):
        for n in range(cols - num + 1):
            product = 1
            for i in range(num):
                product = product * data[m, n + i]
            if product > max_product:
                max_product = product

    # vertical (includes both up and down)
    for m in range(rows - num + 1):
        for n in range(cols):
            product = 1
            for i in range(num):
                product = product * data[m + i, n]
            if product > max_product:
                max_product = product

    # diagonal NW, SE
    for m in range(rows - num + 1):
        for n in range(cols - num + 1):
            product = 1
            for i in range(num):
                product = product * data[m + i, n + i]
            if product > max_product:
                max_product = product

    # diagonal NE, SW
    for m in range(rows - num + 1):
        for n in range(num - 1, cols):
            product = 1
            for i in range(num):
                product = product * data[m + i, n - i]
            if product > max_product:
                max_product = product

    return max_product


def problem_twelve(num):
    """
    The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
    The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors?
    """
    i = 1
    natural_num = 0

    while True:
        natural_num += i
        output = prime.divisors_count(natural_num)

        if output > num:
            break

        i += 1

    return natural_num, output


def problem_thirteen(num):
    """
    Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
    """
    input = [
        37107287533902102798797998220837590246510135740250,
        46376937677490009712648124896970078050417018260538,
        74324986199524741059474233309513058123726617309629,
        91942213363574161572522430563301811072406154908250,
        23067588207539346171171980310421047513778063246676,
        89261670696623633820136378418383684178734361726757,
        28112879812849979408065481931592621691275889832738,
        44274228917432520321923589422876796487670272189318,
        47451445736001306439091167216856844588711603153276,
        70386486105843025439939619828917593665686757934951,
        62176457141856560629502157223196586755079324193331,
        64906352462741904929101432445813822663347944758178,
        92575867718337217661963751590579239728245598838407,
        58203565325359399008402633568948830189458628227828,
        80181199384826282014278194139940567587151170094390,
        35398664372827112653829987240784473053190104293586,
        86515506006295864861532075273371959191420517255829,
        71693888707715466499115593487603532921714970056938,
        54370070576826684624621495650076471787294438377604,
        53282654108756828443191190634694037855217779295145,
        36123272525000296071075082563815656710885258350721,
        45876576172410976447339110607218265236877223636045,
        17423706905851860660448207621209813287860733969412,
        81142660418086830619328460811191061556940512689692,
        51934325451728388641918047049293215058642563049483,
        62467221648435076201727918039944693004732956340691,
        15732444386908125794514089057706229429197107928209,
        55037687525678773091862540744969844508330393682126,
        18336384825330154686196124348767681297534375946515,
        80386287592878490201521685554828717201219257766954,
        78182833757993103614740356856449095527097864797581,
        16726320100436897842553539920931837441497806860984,
        48403098129077791799088218795327364475675590848030,
        87086987551392711854517078544161852424320693150332,
        59959406895756536782107074926966537676326235447210,
        69793950679652694742597709739166693763042633987085,
        41052684708299085211399427365734116182760315001271,
        65378607361501080857009149939512557028198746004375,
        35829035317434717326932123578154982629742552737307,
        94953759765105305946966067683156574377167401875275,
        88902802571733229619176668713819931811048770190271,
        25267680276078003013678680992525463401061632866526,
        36270218540497705585629946580636237993140746255962,
        24074486908231174977792365466257246923322810917141,
        91430288197103288597806669760892938638285025333403,
        34413065578016127815921815005561868836468420090470,
        23053081172816430487623791969842487255036638784583,
        11487696932154902810424020138335124462181441773470,
        63783299490636259666498587618221225225512486764533,
        67720186971698544312419572409913959008952310058822,
        95548255300263520781532296796249481641953868218774,
        76085327132285723110424803456124867697064507995236,
        37774242535411291684276865538926205024910326572967,
        23701913275725675285653248258265463092207058596522,
        29798860272258331913126375147341994889534765745501,
        18495701454879288984856827726077713721403798879715,
        38298203783031473527721580348144513491373226651381,
        34829543829199918180278916522431027392251122869539,
        40957953066405232632538044100059654939159879593635,
        29746152185502371307642255121183693803580388584903,
        41698116222072977186158236678424689157993532961922,
        62467957194401269043877107275048102390895523597457,
        23189706772547915061505504953922979530901129967519,
        86188088225875314529584099251203829009407770775672,
        11306739708304724483816533873502340845647058077308,
        82959174767140363198008187129011875491310547126581,
        97623331044818386269515456334926366572897563400500,
        42846280183517070527831839425882145521227251250327,
        55121603546981200581762165212827652751691296897789,
        32238195734329339946437501907836945765883352399886,
        75506164965184775180738168837861091527357929701337,
        62177842752192623401942399639168044983993173312731,
        32924185707147349566916674687634660915035914677504,
        99518671430235219628894890102423325116913619626622,
        73267460800591547471830798392868535206946944540724,
        76841822524674417161514036427982273348055556214818,
        97142617910342598647204516893989422179826088076852,
        87783646182799346313767754307809363333018982642090,
        10848802521674670883215120185883543223812876952786,
        71329612474782464538636993009049310363619763878039,
        62184073572399794223406235393808339651327408011116,
        66627891981488087797941876876144230030984490851411,
        60661826293682836764744779239180335110989069790714,
        85786944089552990653640447425576083659976645795096,
        66024396409905389607120198219976047599490197230297,
        64913982680032973156037120041377903785566085089252,
        16730939319872750275468906903707539413042652315011,
        94809377245048795150954100921645863754710598436791,
        78639167021187492431995700641917969777599028300699,
        15368713711936614952811305876380278410754449733078,
        40789923115535562561142322423255033685442488917353,
        44889911501440648020369068063960672322193204149535,
        41503128880339536053299340368006977710650566631954,
        81234880673210146739058568557934581403627822703280,
        82616570773948327592232845941706525094512325230608,
        22918802058777319719839450180888072429661980811197,
        77158542502016545090413245809786882778948721859617,
        72107838435069186155435662884062257473692284509516,
        20849603980134001723930671666823555245252804609722,
        53503534226472524250874054075591789781264330331690,
    ]
    output = 0

    for index, element in enumerate(input):
        output += element

    return str(output)[0:num]


def problem_fourteen(num):
    """
    The following iterative sequence is defined for the set of positive integers:
        n → n/2 (n is even)
        n → 3n + 1 (n is odd)
    Using the rule above and starting with 13, we generate the following sequence:
    13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
    It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.
    Although it has not been proved yet (Collatz Problem), it is thought that all starting
    numbers finish at 1.
    Which starting number, under one million, produces the longest chain?

    NOTE: Once the chain starts the terms are allowed to go above one million.
    """
    max_length = 1
    for i in range(3, num, 2):

        length = 1
        collatz = i
        while collatz > 1:

            if collatz % 2 == 0:
                collatz = collatz / 2
                length += 1
            else:
                collatz = (3 * collatz) + 1
                length += 1
        if length > max_length:
            max_length, variable = length, i

    return max_length, variable


def problem_fifteen(moves: int, right: int) -> int:
    """
    Starting in the top left corner of a 2×2 grid, and only being able to
    move to the right and down, there are exactly 6 routes to the bottom right corner.
    How many such routes are there through a 20×20 grid?
    """

    # permutation - when the order does matter (lock combo 812 matters, 6 perms)
    # repetition is allowed:        n^r
    # 0-10 lock, 3 numbers, = 10^3

    # repetition isn't allowed:     n!/(n-r)!
    # order of choosing 3 of 16 pool balls, = 16!/13! = 16*15*14 = 3,360

    # combination - when the order doesn't matter (lock combo 812, 218, 182 etc. 1 combo)
    # repetition is allowed:        (r + n - 1)! / r!(n - 1)!

    # repetition isn't allowed:     n!/r!(n-r)! or ( n over r)
    # lottery, matching numbers. reduce perm by how many objects we can order in it
    # choosing 3 of 16 pool balls, = 16!/3!13! = 16*15*14 * 1/6 = 560
    # "16 choose 3" - "Binomial coefficient"

    # num moves in the grid, consisting of
    return math.factorial(moves) / (
        math.factorial(right) * math.factorial(moves - right)
    )


def problem_sixteen(num: int) -> int:
    """
    2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
    What is the sum of the digits of the number 2^1000?
    """
    number = 2**num
    print(number)
    output = 0
    for i in str(number):
        output += int(i)
    return output


def problem_seventeen(num):
    """
    If the numbers 1 to 5 are written out in words:
    one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
    If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
    NOTE: Do not count spaces or hyphens.
    For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters.
    The use of "and" when writing out numbers is in compliance with British usage.
    """

    single = {
        0: "",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
        10: "ten",
    }
    teens = {
        1: "eleven",
        2: "twelve",
        3: "thirteen",
        4: "fourteen",
        5: "fifteen",
        6: "sixteen",
        7: "seventeen",
        8: "eighteen",
        9: "nineteen",
    }
    tens = {
        1: "ten",
        2: "twenty",
        3: "thirty",
        4: "forty",
        5: "fifty",
        6: "sixty",
        7: "seventy",
        8: "eighty",
        9: "ninety",
    }
    length = 0
    for i in range(1, num + 1):
        if i <= 10:
            number = str(single[i])

        if i > 10 and i < 20:
            number = teens[int(str(i)[1])]
        if i >= 20 and i < 100:
            dig_one = str(i)[0]
            dig_two = str(i)[1]
            if int(dig_two) == 0:
                number = f"{tens[int(dig_one)]}"
            else:
                number = f"{tens[int(dig_one)]}-{single[int(dig_two)]}"

        if i >= 100 and i < 1000:
            dig_one = str(i)[0]
            dig_two = str(i)[1]
            dig_three = str(i)[2]

            if dig_two == "0" and dig_three == "0":
                number = f"{single[int(dig_one)]} hundred"
            elif dig_two == "0":
                number = f"{single[int(dig_one)]} hundred and {single[int(dig_three)]}"
            elif dig_three == "0":
                number = f"{single[int(dig_one)]} hundred and {tens[int(dig_two)]}"
            elif dig_two == "1":
                number = f"{single[int(dig_one)]} hundred and {teens[int(dig_three)]}"
            else:
                number = f"{single[int(dig_one)]} hundred and {tens[int(dig_two)]}-{single[int(dig_three)]}"

        if i == 1000:
            number = "one thousand"

        length += len(number.replace(" ", "").replace("-", ""))

    return length


def problem_eighteen():
    """
    By starting at the top of the triangle below and moving to adjacent numbers on the row below,
    the maximum total from top to bottom is 23.
    3
    7 4
    2 4 6
    8 5 9 3
    That is, 3 + 7 + 4 + 9 = 23.

    Find the maximum total from top to bottom of the triangle below:
    """

    input = [
        [75],
        [95, 64],
        [17, 47, 82],
        [18, 35, 87, 10],
        [20, 4, 82, 47, 65],
        [19, 1, 23, 75, 3, 34],
        [88, 2, 77, 73, 7, 63, 67],
        [99, 65, 4, 28, 6, 16, 70, 92],
        [41, 41, 26, 56, 83, 40, 80, 70, 33],
        [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
        [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
        [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
        [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
        [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
        [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23],
    ]

    for i in range(len(input) - 2, -1, -1):
        for y in range(len(input[i])):
            input[i][y] = max(
                (input[i][y] + input[i + 1][y]), (input[i][y] + input[i + 1][y + 1])
            )
    return input[0][0]


def problem_nineteen(start: int, end: int, period: int) -> int:
    """You are given the following information, but you may prefer to do some research for yourself.
    1 Jan 1900 was a Monday.
    Thirty days has September,
    April, June and November.
    All the rest have thirty-one,
    Saving February alone,
    Which has twenty-eight, rain or shine.
    And on leap years, twenty-nine.
    A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
    How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?

    start = Beginning year
    end = Last year
    period = Year to start counting
    """
    days = {
        1: 31,
        2: 28,
        3: 31,
        4: 30,
        5: 31,
        6: 30,
        7: 31,
        8: 31,
        9: 30,
        10: 31,
        11: 30,
        12: 31,
    }

    weekday = 0
    sunday_count = 0
    output = 0

    # year
    for year in range(start, end + 1):
        if (year % 400 == 0) and (year % 100 == 0):
            leap_year = True
        elif (year % 4 == 0) and (year % 100 != 0):
            leap_year = True
        else:
            leap_year = False
        # month
        for month in range(1, 13):
            # day
            if leap_year and month == 2:
                for day in range(1, 30):
                    if weekday == 7:
                        weekday = 1
                    else:
                        weekday += 1
                        if weekday == 7:
                            sunday_count += 1
                    if weekday == 7 and day == 1 and year >= period:
                        output += 1
            else:
                for day in range(1, days[month] + 1):
                    if weekday == 7:
                        weekday = 1
                    else:
                        weekday += 1
                        if weekday == 7:
                            sunday_count += 1
                    if weekday == 7 and day == 1 and year >= period:
                        output += 1
    return output


def problem_twenty(num: int) -> int:
    """
    n! means n × (n − 1) × ... × 3 × 2 × 1

    For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
    and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

    Find the sum of the digits in the number 100!
    """
    number = math.factorial(num)

    output = 0
    for i in str(number):
        output += int(i)

    return output


if __name__ == "__main__":
    test = problem_twenty(100)
    print(test)

"""Project Euler: Problems 1-10"""
from euler import prime

import math


def problem_one(num):
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    output = 0
    for i in range(1, num):
        if i % 3 == 0 or i % 5 == 0:
            output += i
    return output


def problem_two(num):
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    """
    var1 = 1
    var2 = 2
    output = 0
    while var2 < num:
        if var2 % 2 == 0:
            output += var2
        var2 += var1
        var1 = var2 - var1
    return output


def problem_three(num):
    """
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143?
    """
    output = prime.prime_factors(num)
    return output[-1]


def problem_four(num):
    """
    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
    Find the largest palindrome made from the product of two 3-digit numbers.
    """
    length = ""
    for i in range(1, num + 1):
        length += "9"
    output = max(
        i * y
        for i in range(1, int(length) + 1)
        for y in range(1, int(length) + 1)
        if str(i * y) == str(i * y)[::-1]
    )
    return output


if __name__ == "__main__":
    problem_four(2)
    # answer = problem_four(9009)
    # print(f"Number: {answer}")

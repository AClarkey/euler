"""Project Euler: Problems 11-20"""
from euler import prime

import math
import numpy as np


def problem_eleven(data, num):
    """
    In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
    The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
    What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
    """

    rows = np.shape(data)[0]
    cols = np.shape(data)[1]
    print(f"rows: {rows} cols: {cols}")
    max_product = 1

    # horizontal (includes both left and right)
    for m in range(rows):
        for n in range(cols - num + 1):
            product = 1
            for i in range(num):
                product = product * data[m, n + i]
            if product > max_product:
                max_product = product

    # vertical (includes both up and down)
    for m in range(rows - num + 1):
        for n in range(cols):
            product = 1
            for i in range(num):
                product = product * data[m + i, n]
            if product > max_product:
                max_product = product

    # diagonal NW, SE
    for m in range(rows - num + 1):
        for n in range(cols - num + 1):
            product = 1
            for i in range(num):
                product = product * data[m + i, n + i]
            if product > max_product:
                max_product = product

    # diagonal NE, SW
    for m in range(rows - num + 1):
        for n in range(num - 1, cols):
            product = 1
            for i in range(num):
                product = product * data[m + i, n - i]
            if product > max_product:
                max_product = product

    return max_product


def problem_twelve(num):
    """
    The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
    The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors?
    """
    i = 1
    natural_num = 0

    while True:
        natural_num += i
        output = prime.divisors(natural_num)

        if output > num:
            break

        i += 1

    return natural_num, output


if __name__ == "__main__":
    number, test = problem_twelve(8)
    print(number, test)
